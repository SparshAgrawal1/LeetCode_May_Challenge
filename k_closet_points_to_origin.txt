jewels and stones
class Solution {
public:
    int numJewelsInStones(string J, string S) {
        int count=0;
        for(int i=0 ; i<J.length() ; i++)
        {
            for(int j=0 ; j<S.length() ; j++)
            {
                if(J[i]==S[j])
                    count++;
            }
        }
        return count;
        
    }
};

ransom note
#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        unordered_map<int,int> u;
        for(int i=0 ; i<magazine.length() ; i++)
        {
            u[magazine[i]]++;
        }
        for(int i=0 ; i<ransomNote.length() ; i++)
        {
            u[ransomNote[i]]--;
        }
        for(auto x:u)
        {
            if(x.second<0)
            {
                return false;
            }
        }
        return true;
        
        
    }
};


Number complement
#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    int findComplement(int num) {
        int c;
        int d; 
        int e=0;
        int i=0;
        while(num>0)
        {
            c=num%2;
            num=num/2;
            if(c==1)
                c=0;
            else
                c=1;
            d = pow(2,i)*c;
            e=e+d;
            i++;
        }
        return e;
        
    }
};


first unique character in a string
class Solution {
public:
    int firstUniqChar(string s) {
        int a[256] ;
        for(int i=0 ; i<256 ; i++)
        {
            a[i]=-1;
        }
        for(int i=0 ; i<s.length() ; i++)
        {
            if(a[s[i]]==-1)
                a[s[i]]=i;
            else
                a[s[i]]=-2;
        }
        int res=INT_MAX;
        for(int i=0 ; i<256 ; i++)
        {
            if(a[i]>=0)
            {
                res = min(res,a[i]);
            }
        }
        if(res==INT_MAX)
            return -1;
        return res;
        
    }
};


Majority element
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> m;
        int n = nums.size();
        for(int i=0 ; i<n ; i++)
        {
            m[nums[i]]++;
        }
        for(auto x:m)
        {
            if(x.second>n/2)
            {
                return x.first;
            }
        }
        return -1;
        
    }
};


cousins in a binary tree
class Solution {
public:
  
    bool isCousins(TreeNode* root, int x, int y) {
       queue<TreeNode*> q;
        TreeNode *temp = nullptr;
        int size, count;

        q.push(root);
        while(!q.empty()){
        count = 0;
        size = q.size();
        while(size--){
        temp = q.front();
        q.pop();
        if(temp->left && (temp->left->val == x || temp->left->val == y))
        count++;
        else if(temp->right && (temp->right->val == x || temp->right->val == y))
        count++;
        if(temp->left)
        q.push(temp->left);
        if(temp->right)
        q.push(temp->right);
        }
        if(count == 2)
        return true;
        }
        return false;
}
};


check if it is a sraight line
class Solution {
public:
    bool checkStraightLine(vector<vector<int>>& coordinates) {
        
        
        int n = coordinates.size();
        if(n==0 || n==1)
            return false;
        if(n==2)
            return true;
        int a = coordinates[1][0] - coordinates[0][0];
        int b = coordinates[1][1] - coordinates[0][1];
        float res = (float)b/a;
        for(int i=2 ; i<n ; i++)
        {
            a = coordinates[i][0] - coordinates[i-1][0];
            b = coordinates[i][1] - coordinates[i-1][1];
            float curr = (float)b/a;
            if(curr!=res)
                return false;
        }
        return true;
        
    }
};


valid perfect square
class Solution {
public:
    bool isPerfectSquare(int x) {
         double sr = sqrt(x); 
  
         return ((sr - floor(sr)) == 0);
        
    }
};



Find the town judge
class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        
        int a = trust.size();
        map<int,int> v;
        for(int i=0 ; i<a ;i++)
        {
            v[trust[i][0]]--;
            v[trust[i][1]]++;
        }
        for(int i=1 ; i<=n ; i++)
        {
            if(v[i]==n-1)
                return i;
        }
        return -1;
        
    }
};

Flood fill
class Solution {
public:
    void abcdef(vector<vector<int>>& image, int sr, int sc, int newColor,int prev)
    {
        int n = image[0].size();
        int m = image.size();
        if(sr<0 || sc<0 || sr>=m || sc>=n )
            return;
        if(image[sr][sc]==newColor)
            return;
        if(image[sr][sc]!=prev)
            return;
        image[sr][sc] = newColor;
        abcdef(image,sr-1,sc,newColor,prev);
        abcdef(image,sr+1,sc,newColor,prev);
        abcdef(image,sr,sc+1,newColor,prev);
        abcdef(image,sr,sc-1,newColor,prev);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int prev = image[sr][sc];
        abcdef(image,sr,sc,newColor,prev);
        return image;
        
        
    }
};


Single element in a sorted array
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        unordered_map<int,int> m;
        for(int i=0 ; i<nums.size() ; i++)
        {
            m[nums[i]]++;
        }
        for(auto x:m)
        {
            if(x.second==1)
                return x.first;
        }
        return -1;
        
    }
};



Implement Trie
class TrieNode {
public:
    // Initialize your data structure here.
    TrieNode() {
        value = 0;
        for (int i=0;i<26;i++){
            children[i] = NULL;
        }
    }
    int value;
    TrieNode* children[26];
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
        count = 0;
    }

    // Inserts a word into the trie.
    void insert(string s) {
        TrieNode *p = root;
        int len = s.size();
        for (int i=0;i<len;i++){
            int idx = s[i] - 'a';
            if (! p->children[idx]){
                p->children[idx] = new TrieNode();
            }
            p = p->children[idx];
        }
        count++;
        p->value = count;
    }

    // Returns if the word is in the trie.
    bool search(string key) {
        TrieNode *p = root;
        int len = key.size();
        for (int i=0;i<len;i++){
            int idx = key[i] - 'a';
            if (p->children[idx]){
                p = p->children[idx];
            }else{
                return false;
            }
        }
        if (p->value!=0){
            return true;
        }else{
            return false;
        }
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        TrieNode *p = root;
        int len = prefix.size();
        for (int i=0;i<len;i++){
            int idx = prefix[i] - 'a';
            if (p->children[idx]){
                p = p->children[idx];
            }else{
                return false;
            }
        }
      return true;
    }

private:
    TrieNode* root;
    int count;
};




Max sum circularf array
class Solution {
public:
    // int kadane(vector<int> a, int n);
    int maxSubarraySumCircular(vector<int>& arr) {
        int n = arr.size();
        int i;
        int maxintotal=arr[0];
        int maxcurr=arr[0];
        int minintotal=arr[0];
        int mincurr=arr[0];
        int sum=arr[0];
        for(i=1;i<n;i++)
        {
            if(maxcurr+arr[i]>arr[i])
            {
                maxcurr=maxcurr+arr[i];
            }
            else
            {
                maxcurr=arr[i];
            }
            maxintotal=max(maxintotal,maxcurr);
            if(mincurr+arr[i]<arr[i])
            {
                mincurr=mincurr+arr[i];
            }
            else
            {
                mincurr=arr[i];
            }
            minintotal=min(minintotal,mincurr);
            sum=sum+arr[i];

        }
        if(minintotal==sum)
        return maxintotal;
        else
        return max(sum-minintotal,maxintotal);
        
    }
    int kadane(vector<int> a, int n)  
    {  
        int max_so_far = 0, max_ending_here = 0;  
        int i;  
        for (i = 0; i < n; i++)  
        {  
            max_ending_here = max_ending_here + a[i];  
            if (max_ending_here < 0)  
                max_ending_here = 0;  
            if (max_so_far < max_ending_here)  
                max_so_far = max_ending_here;  
        }  
        return max_so_far;  
    }  
};




Odd even linked list
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL)
            return NULL;
 
        ListNode* result = head;
        ListNode* p1 = head;
        ListNode* p2 = head->next;
        ListNode* connectNode = head->next;

        while(p1 != NULL && p2 != NULL)
        {
                ListNode* t = p2->next;
                if(t == NULL)
                    break;

                p1->next = p2->next;
                p1 = p1->next;

                p2->next = p1->next;
                p2 = p2->next;
        }

        p1->next = connectNode;

        return result;
        
    }
};


Find all anagrams in a string
#include <bits/stdc++.h>
#include <algorithm>
#include <string.h>
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> v;
        map<int,int> m1,m2;
        int n = s.length();
        int m = p.length();
        int res=0;
        int curr=0;
        for(int i=0 ; i<m ; i++)
        {
            m1[p[i]]++;
            m2[s[i]]++;
            res = res + p[i];
            curr = curr + s[i];
        }
        if(curr==res && m2==m1)
        {
            v.push_back(0);
        }
        int ans=1;
        for(int i=m ; i<n ; i++)
        {
            curr = curr + s[i] - s[i-m];
            m2[s[i-m]]--;
            if(m2[s[i-m]]==0)
                m2.erase(s[i-m]);
            m2[s[i]]++;
            if(curr==res && m2==m1)
            {
                v.push_back(ans);
            }
            ans++;
        }
        return v;
        
        
    }
};


Permutation in a string
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int m = s1.length();
        int n = s2.length();
        map<int,int> m1,m2;
        if(m>n)
            return false;
        int res=0;
        int curr=0;
        for(int i=0 ; i<m ; i++)
        {
            res = res + s1[i];
            curr = curr + s2[i];
            m1[s1[i]]++;
            m2[s2[i]]++;
        }
        if(m1==m2 && curr==res)
            return true;
        for(int i=m ; i<n ; i++)
        {
            curr = curr + s2[i] - s2[i-m];
            m2[s2[i-m]]--;
            if(m2[s2[i-m]]==0)
                m2.erase(s2[i-m]);
            m2[s2[i]]++;
            if(curr==res && m1==m2) 
                return true;     
        }
        return false;
        
    }
};


Online stock span
class StockSpanner:

    def __init__(self):
        self.stack = []

    def next(self, price: int) -> int:
        current_span = 1
        while self.stack and self.stack[-1][0] <= price:
            p, span = self.stack.pop()
            current_span += span
        self.stack.append((price, current_span))
        return current_span




Kth smallest in an BSt
class Solution {
public:
    void inorder_check(TreeNode* root,vector<int> &v)
    {
        if(root==NULL)  
            return;
        inorder_check(root->left,v);
        v.push_back(root->val);
        inorder_check(root->right,v);
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> v;
        inorder_check(root,v);
        int c;
        for(int i=0 ; i<k; i++)
        {
            c = v[i];
        }
        return c;
    }
};



Count square submatrtices with 1
class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        m,n = len(matrix),len(matrix[0])
        ans = [[0 for i in range(n)] for j in range(m)]
        count_squre = 0
        for i in range(m):
            for j in range(n):
                if i==0 or j==0:
                    ans[i][j] = matrix[i][j]
                elif matrix[i][j] == 0:  
                    ans[i][j] = 0
                else:
                    ans[i][j] = matrix[i][j] + min(ans[i-1][j],ans[i-1][j-1],ans[i][j-1])
                count_squre += ans[i][j]
        print(ans)
        return count_squre


Sort characters by frequency
#include <bits/stdc++.h>
class Solution {
public:
    static bool cmp(pair <int, char> a, pair <int, char> b){
      return a.first < b.first;
    }
    string frequencySort(string s) {
        // string res="";
        map<char,int> m;
        // priority_queue<pair<int,char>> m1;
        for(int i=0 ; i<s.length() ; i++)
        {
            m[s[i]]++;
        }
        vector < pair <int, char> > v;
        map <char, int> :: iterator i = m.begin();
        while(i != m.end()){
         v.push_back({i->second, i->first});
         i++;
      }
      sort(v.rbegin(), v.rend(), cmp);
      string ans = "";
      for(int i = 0; i < v.size(); i++){
         int t = v[i].first;
         while(t--)ans += v[i].second;
      }
      return ans;
        
        
        
    }
};


Interval list intersections
class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        int n = A.size();
        int m = B.size();
        vector<vector<int>> C;
        for(int i=0 ; i<n ; i++)
        {
            for(int j=0 ; j<m ; j++)
            {
                if(B[j][0]>A[i][1] || B[j][1]<A[i][0])
                {
                    continue;
                }
                else
                {
                    int c = max(A[i][0],B[j][0]);
                    int d = min(A[i][1],B[j][1]);
                    C.push_back({c,d});
                    
                }
            }
        }
        return C;
        
    }
};


 Construct Binary Search Tree from Preorder Traversal
class Solution {
public:
    TreeNode* insert(TreeNode* root,int val){
    TreeNode* nw = new TreeNode();
    nw->right=NULL;
    nw->left=NULL;
    nw->val=val;
    if(root == NULL){
        root = nw;
        return root;
    }
    if(root->val > val){
        root->left = insert(root->left,val);
    }else if(root->val <= val){
        root->right = insert(root->right,val);
    }
    return root;
}
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root = NULL;
        int size = preorder.size();
        for(int i=0;i<size;i++){
          root = insert(root,preorder[i]);
        }
        return root;
        
    }
};


Uncrossed lines
class Solution {
public:
    int maxUncrossedLines(vector<int>& A, vector<int>& B) {
       
        int M = A.size(), N = B.size();
        vector<vector<int>> dp(M + 1, vector<int>(N + 1));
        for (int i = 0; i < M; ++i) {
            for (int j = 0; j < N; ++j) {
                if (A[i] == B[j]) dp[i + 1][j + 1] = 1 + dp[i][j];
                else dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);
            }
        }
        return dp[M][N];
    }
};



Contiguous array
class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int n = nums.size();
        if(n==0 || n==1)
            return 0;
        for(int i=0 ; i<n ; i++)
        {
            if(nums[i]==0)
            {
                nums[i]=-1;
            }
        }
        int a[n];
        map<int,int> p;
        int y = INT_MIN;
        a[0] = nums[0];
        p[a[0]]=0;
        for(int i=1 ; i<n ; i++)
        {
            a[i] = nums[i]+a[i-1];
           
            if(p.find(a[i])==p.end())
            {
                p[a[i]] = i;
                if(a[i]==0)
                {
                    y = max(y,p[a[i]]+1);
                }
            }
            else
            {
                if(a[i]==0)
                {
                    y = max(y,i+1);
                }
                else
                {
                    y=max(y,i-p[a[i]]);
                }
            }
        }
        // return y;
        
        
        if(y<0)
            return 0;
        return y;
        
        
    }
};





Possible bypartition
class Solution {
    public boolean possibleBipartition(int N, int[][] dislikes) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for(int[] dislike : dislikes){
            List<Integer> temp = graph.containsKey(dislike[0]) ? graph.get(dislike[0]): new ArrayList<>();
            temp.add(dislike[1]);
            graph.put(dislike[0], temp);
            temp = graph.containsKey(dislike[1]) ? graph.get(dislike[1]): new ArrayList<>();
            temp.add(dislike[0]);
            graph.put(dislike[1], temp);
        }
        Queue<Integer> queue = new LinkedList<>();
        int[] visited = new int[N + 1];
        for(int i = 0; i < N; i++){
            if(visited[i] == 0){
                visited[i] = 1;
                queue.offer(i);
                while(!queue.isEmpty()){
                    int cur = queue.poll();
                    List<Integer> temp = graph.get(cur);
                    if(temp == null) continue;
                    for(Integer next : temp){
                        if(visited[next] == visited[cur]) return false;
                        if(visited[next] == 0){
                            visited[next] = -visited[cur];
                            queue.offer(next);
                        }
                    }
                }
            }
        }
        return true;
    
    }
}



Counting bits
class Solution {
public:
//     #include <bits/stdc++.h> 
// using namespace std; 
  
    int BitsSetTable256[256]; 
    void initialize()  
    {  
        BitsSetTable256[0] = 0;  
        for (int i = 0; i < 256; i++) 
        {  
            BitsSetTable256[i] = (i & 1) +  
            BitsSetTable256[i / 2];  
        }  
    }  

    int countSetBits(int n)  
    {  
        return (BitsSetTable256[n & 0xff] +  
                BitsSetTable256[(n >> 8) & 0xff] +  
                BitsSetTable256[(n >> 16) & 0xff] +  
                BitsSetTable256[n >> 24]);  
    }  
    vector<int> countBits(int n) {
        vector<int> v;
        for(int i=0 ; i<=n ; i++)
        {
            initialize();
            v.push_back(countSetBits(i));
        }
        return v;
        
    }
};



Course Schedule
class Solution {
public:
    bool xxxx(vector<int> a[], bool b[], bool c[], int s)
    {
        b[s]=true;
        c[s]=true;
        for(auto x:a[s])
        {
            if(b[x]==false && xxxx(a,b,c,x))
                return true;
            else if(c[x]==true)
                return true;

        }
        c[s]=false;
        return false;
    }
    bool canFinish(int n, vector<vector<int>>& p) {
        int m=p.size();
        vector<int> v[n];
        
        for(int i=0 ; i<m ; i++)
        {
            v[p[i][0]].push_back(p[i][1]);
        }
        bool b[n],c[n];
        for(int i=0 ; i<n ; i++)
        {
            b[i]=false;
            c[i]=false;
        }
        for(int i=0 ; i<n ; i++)
        {
            if(b[i]==false)
            {
                if(xxxx(v,b,c,i)==true)
                    return false;
            }
        }
        return true;

        }
};



K closet points to origin
class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        int n = points.size();
        vector<vector<int>> v;
        map<int,vector<int>> m;
        int ans=0;
        for(int i=0 ; i<n ; i++)
        {
            int j = (points[i][0]*points[i][0]) + (points[i][1]*points[i][1]);
            m[j].push_back(points[i][0]);
            m[j].push_back(points[i][1]);
        }
        for(auto x:m )
        {
            if(K==0)
            {
                break;
            }
            
            int k = m[x.first].size();
            int y = k/2;
            for(int i=0 ; i<k ; i=i+2)
            {
                vector<int> v1;
                v1.push_back(m[x.first][i]);
                v1.push_back(m[x.first][i+1]);
                v.push_back(v1);
                
            }
            K=K-y;
            
        }
        return v;
        
        
    }
};


Edit distance
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.length();
        int n = word2.length();
        // return xxxx(word1,word2);int m = word1.length(), n = word2.length();

        int dp[m+1][n+1];

        for(int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        for(int j = 0; j <= n; j++) {
            dp[0][j] = j;
        }

        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(word1[i - 1] == word2[j - 1])
                    dp[i][j] = dp[i - 1][j - 1];
                else
                    dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i - 1][j] + 1, dp[i][j - 1] + 1);
            }
        }
        return dp[m][n];
    
        
    }
     int min(int a, int b, int c) {
        if(a <= b && a <= c) return a;
        else if (b <= a && b <= c) return b;
        else return c;
    }
};

        


