class Solution {
public:
    // int kadane(vector<int> a, int n);
    int maxSubarraySumCircular(vector<int>& arr) {
        int n = arr.size();
        int i;
        int maxintotal=arr[0];
        int maxcurr=arr[0];
        int minintotal=arr[0];
        int mincurr=arr[0];
        int sum=arr[0];
        for(i=1;i<n;i++)
        {
            if(maxcurr+arr[i]>arr[i])
            {
                maxcurr=maxcurr+arr[i];
            }
            else
            {
                maxcurr=arr[i];
            }
            maxintotal=max(maxintotal,maxcurr);
            if(mincurr+arr[i]<arr[i])
            {
                mincurr=mincurr+arr[i];
            }
            else
            {
                mincurr=arr[i];
            }
            minintotal=min(minintotal,mincurr);
            sum=sum+arr[i];

        }
        if(minintotal==sum)
        return maxintotal;
        else
        return max(sum-minintotal,maxintotal);
        
    }
    int kadane(vector<int> a, int n)  
    {  
        int max_so_far = 0, max_ending_here = 0;  
        int i;  
        for (i = 0; i < n; i++)  
        {  
            max_ending_here = max_ending_here + a[i];  
            if (max_ending_here < 0)  
                max_ending_here = 0;  
            if (max_so_far < max_ending_here)  
                max_so_far = max_ending_here;  
        }  
        return max_so_far;  
    }  
};
